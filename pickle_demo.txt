cdjango.db.models.base
model_unpickle
--> load_global --> stack[0] = django.db.models.base.model_unpickle (一方面添加到stack, 另一方面加载对应的class)

p0
--> memo["0"] = django.db.models.base.model_unpickle

(cdjango.contrib.auth.models
User
--> stack[1] = self.mark
    stack[2] = django.contrib.auth.models.User
p1
--> memo["1"] = django.contrib.auth.models.User

(lp2
--> stack[3] = self.mark
    stack[3] = []  (list直接替换self.mark)
    memo["2"] = []

cdjango.db.models.base
simple_class_factory
--> stack[4] = django.db.models.base.simple_class_factory

p3
--> memo["3"] = django.db.models.base.simple_class_factory

tp4

--> make tuple
    stack = [model_unpickle, mark, User, [], factory] ---> [model_unpickle, (mark, User, [], factory)]
    stack[1] = (User, [], django.db.models.base.simple_class_factory, )
    memo["4"] = ([], django.db.models.base.simple_class_factory, )

Rp5
--> load_reduce
    stack[-1](stack.pop())
    user = model_unpickle(User, [], django.db.models.base.simple_class_factory)
    stack[0] = user
    memo["5"] = user

(dp6
--> stack[1] = self.mark      # "(" means mark
--> d: 从上一个mark开始构建一个dict, 这里应该是一个空的dict
    stack[1] = {}
--> memo["6"] = {}

S'_state'
--> stack[2] = "_state"

p7
--> memo["7"] = "_state"

ccopy_reg
_reconstructor
--> stack[3] = copy_reg._reconstructor

p8
--> memo["8"] = copy_reg._reconstructor

(cdjango.db.models.base
ModelState
--> stack[4] = self.mark
--> stack[5] = django.db.models.base.ModelState

p9
--> memo["9"] = django.db.models.base.ModelState

c__builtin__
object
--> stack[6] = __builtin__.object

p10
--> memo["10"] = __builtin__.object

Ntp11
--> stack[7] = None
--> t(TUPLE) ---> stack[4] = (django.db.models.base.ModelState, __builtin__.object, None)

Rp12
--> copy_reg._reconstructor(django.db.models.base.ModelState, __builtin__.object, None)
    stack[3] = State
    memo["12"] = State
(dp13
--> stack[4] = self.mark
    stack[4] = {}
    memo["13"] = {}

S'adding'
--> stack[5] = "adding"
p14
--> memo["14"] = "adding"

I01
--> stack[6] = True  I01和I1不一样，前者为Bool, 后者为int

sS'db'
--> set ==> stack[6] = {"adding": True} (然后: stack就pop了两个元素)
    stack[5] = "db"
p15
--> memo["15"] = "db"

NsbsS'id'
--> N: stack[6] = None
--> s: stack[4] = {"adding": True, "db": None}
    stack: [user, {}, "_state", State, {}]
--> b:   # call __setstate__ or __dict__.update()
    state.__setstate_({"adding": True, "db": None})  # 到此，State构建完毕
--> s: [user, {"_state": State}]
--> stack[2] = "id"  # 准备其他给User的参数, 例如: id

p16
--> memo["16"] = state
I1
--> stack[3] = 1
sb.
--> s: stack[1] = {"_state": state, "id": 1}
--> b: user.__setstate__(stack)
    stack[0] = user
None